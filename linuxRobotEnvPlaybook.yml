# Example usage: 
# ansible-playbook -i "localhost," --connection=local linuxRobotEnv/linuxRobotEnvPlaybook.yml -e git_user_name="'Your Name'" -e git_user_email="your.email@example.com"    # trailing comma after localhost to pass it as inline inventory, connection local to not use ssh (which requires keys) and single and double quotes in user name to escape any contained spaces
#
# This playbook installs necessary packages (git, tmux, vim), configures Git, clones the robotframework-vim repository, 
# and configures .vimrc and .tmux.conf.

- name: Configure the work environment in a newly deployed Linux instance
  hosts: all
  become: yes

  vars:
    git_user_name: "{{ git_user_name | default('Default Name') }}"
    git_user_email: "{{ git_user_email | default('default@example.com') }}"

  tasks:
    - name: Install necessary packages
      yum:
        name: 
          - git
          - tmux
          - vim
        state: present

    - name: Configure Git
      shell: |
        if [ "$(git config --global user.name)" != "{{ git_user_name }}" ]; then
          git config --global user.name "{{ git_user_name }}"
        fi
        if [ "$(git config --global user.email)" != "{{ git_user_email }}" ]; then
          git config --global user.email "{{ git_user_email }}"
        fi
        if ! git config --global color.ui; then
          git config --global color.ui auto
        fi

    - name: Clone robotframework-vim repository
      git:
        repo: 'https://github.com/mfukar/robotframework-vim.git'
        dest: ~/robotframework-vim
        clone: yes
        update: yes

    - name: Ensure ~/.vim directory exists
      file:
        path: ~/.vim
        state: directory

    - name: Copy contents of robotframework-vim to ~/.vim
      copy:
        src: "~/robotframework-vim/"
        dest: "~/.vim/"
        mode: '0755'
        force: yes

    - name: Update .vimrc with custom configuration
      copy:
        dest: ~/.vimrc
        content: |
          " :set formatoptions-=cro to copy paste this without getting extra comments lines
          " command line completion
          set wildchar=<Tab> wildmenu wildmode=full
          " move between buffers without saving
          set hidden
          " tab and shift tab to cycle through buffers
          nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
          nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>
          
          " default color scheme is one with dark blue for comments. Use lighter
          " From https://unix.stackexchange.com/questions/88879/better-colors-so-comments-arent-dark-blue-in-vim
          " For available color schemes: ls /usr/share/vim/vimNN/colors/
          " where NN is the version
          color desert

    - name: Set .tmux.conf with custom configuration
      copy:
        dest: ~/.tmux.conf
        content: |
          # From https://gist.github.com/paulodeleo/5594773
          # Make mouse useful in copy mode
          # This is for the newer versions of tmux so we follow the advice of the comment:
          # https://gist.github.com/paulodeleo/5594773#gistcomment-2015861
          set -g mouse on

          # Allow xterm titles in terminal window, terminal scrolling with scrollbar, and setting overrides of C-Up, C-Down, C-Left, C-Right
          # (commented out because it disables cursor navigation in vim)
          #set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

          # Scroll History
          set -g history-limit 30000

          # Set ability to capture on start and restore on exit window data when running an application
          setw -g alternate-screen on

          # Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
          set -s escape-time 50
